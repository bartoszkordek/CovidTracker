{
	"info": {
		"_postman_id": "8a8fcebf-6e09-49fd-899e-9daff3190e32",
		"name": "CovidTracker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Testy end-to-end",
			"item": [
				{
					"name": "CreateUser - test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody=JSON.parse(pm.request.body.raw);\r",
									"pm.collectionVariables.set(\"user_create_body\",requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(1500);\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have property 'id'.\", ()=>{\r",
									"    pm.expect(pm.response).to.have.jsonBody(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have property 'firstName'.\", ()=>{\r",
									"    pm.expect(pm.response).to.have.jsonBody(\"firstName\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have property 'lastName'.\", ()=>{\r",
									"    pm.expect(pm.response).to.have.jsonBody(\"lastName\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have property 'email'.\", ()=>{\r",
									"    pm.expect(pm.response).to.have.jsonBody(\"email\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should not have property 'password'.\", ()=>{\r",
									"    pm.expect(pm.response).not.to.have.jsonBody(\"password\");\r",
									"});\r",
									"\r",
									"pm.test(\"Except property 'id', request and response bodies should be equal.\", () => {\r",
									"    const requestBody = pm.collectionVariables.get(\"user_create_body\");\r",
									"    let responseBody = pm.response.json();\r",
									"\r",
									"    delete responseBody.id;\r",
									"    delete requestBody.password;\r",
									"\r",
									"    pm.expect(isEqual(requestBody,responseBody)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Janek\",\r\n    \"lastName\": \"Kowalski\",\r\n    \"password\": \"test12314\",\r\n    \"email\": \"jan_kwalski4@wp.pl\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8011/account/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8011",
							"path": [
								"account",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(1000);\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should have header 'token'\", () => {\r",
									"  pm.response.to.have.header(\"token\");\r",
									"  \r",
									"  console.log(pm.response.headers.get('token'));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"user_login_token\", pm.response.headers.get('token'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user_create_body = pm.collectionVariables.get(\"user_create_body\");\r",
									"\r",
									"const user_login_body = {\r",
									"    password: user_create_body.password,\r",
									"    email: user_create_body.email\r",
									"}\r",
									"pm.variables.set('user_login_body', JSON.stringify(user_login_body ));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{user_login_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8011/account/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8011",
							"path": [
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search - test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user_token = pm.collectionVariables.get(\"user_login_token\");\r",
									"console.log(user_token);\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\",\r",
									"    value: user_token\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { isEqual } = require('lodash');\r",
									"\r",
									"pm.test(\"Response status should be 200 or 201.\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"const resTime = Number.parseInt(5000);\r",
									"\r",
									"pm.test(`Response time should be less than ${resTime} ms.`, () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(resTime);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have property 'date'.\", ()=>{\r",
									"    pm.expect(pm.response).to.have.jsonBody(\"date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have property 'newInfected'.\", ()=>{\r",
									"    pm.expect(pm.response).to.have.jsonBody(\"newInfected\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have property 'newRecovered'.\", ()=>{\r",
									"    pm.expect(pm.response).to.have.jsonBody(\"newRecovered\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhMGViNzcyMS00NTk3LTRiMDItYmFhYS03ODgzNjMxMDIwYzEiLCJleHAiOjE2MTE0MzU2NzF9.JLRocvzykRyG6DN-uRjslg_b-QKjmXLm6EVtW5M7oDAsUnlmftOw6pgRkn8_ocB9ct_6PT4FE0PXvv9dqxGGBQ",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8011/search/POL?date=2021-01-07",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8011",
							"path": [
								"search",
								"POL"
							],
							"query": [
								{
									"key": "date",
									"value": "2021-01-07"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreateUser",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Grzegorz\",\r\n    \"lastName\": \"Zacharski\",\r\n    \"password\": \"test12314\",\r\n    \"email\": \"w.zacharski@wp.pl\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8011/account/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"account",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"w.zacharski@wp.pl\",\r\n    \"password\": \"test12314\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8011/account/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"account",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhMGViNzcyMS00NTk3LTRiMDItYmFhYS03ODgzNjMxMDIwYzEiLCJleHAiOjE2MTE0MzU2NzF9.JLRocvzykRyG6DN-uRjslg_b-QKjmXLm6EVtW5M7oDAsUnlmftOw6pgRkn8_ocB9ct_6PT4FE0PXvv9dqxGGBQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8011/search/POL?date=2021-01-07",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"search",
						"POL"
					],
					"query": [
						{
							"key": "date",
							"value": "2021-01-07"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search - Return recovered from date to date from POL",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhMGViNzcyMS00NTk3LTRiMDItYmFhYS03ODgzNjMxMDIwYzEiLCJleHAiOjE2MTE0MzU2NzF9.JLRocvzykRyG6DN-uRjslg_b-QKjmXLm6EVtW5M7oDAsUnlmftOw6pgRkn8_ocB9ct_6PT4FE0PXvv9dqxGGBQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8011/search/POL/recovered?from=2021-01-05&to=2021-01-10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"search",
						"POL",
						"recovered"
					],
					"query": [
						{
							"key": "from",
							"value": "2021-01-05"
						},
						{
							"key": "to",
							"value": "2021-01-10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search - Return total stats form date to date from POL",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhMGViNzcyMS00NTk3LTRiMDItYmFhYS03ODgzNjMxMDIwYzEiLCJleHAiOjE2MTE0Mzc0OTF9.1yr_rD2Affgm03HGB4eno-xpYcU8GUWbgHEmHEJSeiZI6s6dU8b2gUI8oNoWwRTyTRAg_FwCVrv_UAlm6kMM7w"
					}
				],
				"url": {
					"raw": "http://localhost:8011/search/POL/total?from=2021-01-01&to=2021-01-02",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"search",
						"POL",
						"total"
					],
					"query": [
						{
							"key": "from",
							"value": "2021-01-01"
						},
						{
							"key": "to",
							"value": "2021-01-02"
						}
					]
				},
				"description": "Do poprawy Zwwraca złe wartości."
			},
			"response": []
		},
		{
			"name": "Search - Return all deaths from date to date in POL",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhMGViNzcyMS00NTk3LTRiMDItYmFhYS03ODgzNjMxMDIwYzEiLCJleHAiOjE2MTE0MzU2NzF9.JLRocvzykRyG6DN-uRjslg_b-QKjmXLm6EVtW5M7oDAsUnlmftOw6pgRkn8_ocB9ct_6PT4FE0PXvv9dqxGGBQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8011/search/POL/deaths?from=2021-01-01&to=2021-01-10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"search",
						"POL",
						"deaths"
					],
					"query": [
						{
							"key": "from",
							"value": "2021-01-01"
						},
						{
							"key": "to",
							"value": "2021-01-10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search - Return daily stats in DEU",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhMGViNzcyMS00NTk3LTRiMDItYmFhYS03ODgzNjMxMDIwYzEiLCJleHAiOjE2MTE0MzU2NzF9.JLRocvzykRyG6DN-uRjslg_b-QKjmXLm6EVtW5M7oDAsUnlmftOw6pgRkn8_ocB9ct_6PT4FE0PXvv9dqxGGBQ"
					}
				],
				"url": {
					"raw": "http://localhost:8011/search/DEU?date=2021-01-09",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"search",
						"DEU"
					],
					"query": [
						{
							"key": "date",
							"value": "2021-01-09"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search - Return daily stats in POL",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhMGViNzcyMS00NTk3LTRiMDItYmFhYS03ODgzNjMxMDIwYzEiLCJleHAiOjE2MTE0MzU2NzF9.JLRocvzykRyG6DN-uRjslg_b-QKjmXLm6EVtW5M7oDAsUnlmftOw6pgRkn8_ocB9ct_6PT4FE0PXvv9dqxGGBQ"
					}
				],
				"url": {
					"raw": "http://localhost:8011/search/POL?date=2021-01-08",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"search",
						"POL"
					],
					"query": [
						{
							"key": "date",
							"value": "2021-01-08"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Load Balancer",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJjOGQ2Yzk3MC0yZTQ0LTRmMTMtODNhOC0xMTU4NWNlOGMzMGQiLCJleHAiOjE2MTE0Mjc0NzN9.c_NrhZFR1-Qd194qmziA_WcuirGMSr_UFrsCIu5Q_qYzXljhUkVgYwBs7dVIq73BFl8U6tDxHUnb3NFXKFL_gQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8011/search/status/check",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"search",
						"status",
						"check"
					]
				}
			},
			"response": []
		},
		{
			"name": "Runtime configuration 1 attempt",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyNWU0ZjZiYi0yMzI3LTRmNjktOWM3ZC03YWJiZDk3MTkxODciLCJleHAiOjE2MDc5NTY2NjN9.plHFnPFIqQ43xMytuRY_zXFPVe_UzQLboNPGCJAU8yt_F14CYaq43jjVJg77Y9JbMDgpDaDfVKJuC9ijksfIgw",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8011/account/users/status/check/git",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"account",
						"users",
						"status",
						"check",
						"git"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus refresh",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8012/actuator/bus-refresh",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8012",
					"path": [
						"actuator",
						"bus-refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "Runtime configuration 2 attempt",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJjOGQ2Yzk3MC0yZTQ0LTRmMTMtODNhOC0xMTU4NWNlOGMzMGQiLCJleHAiOjE2MTE0MzIwMTd9.1J3QHGPwmXZ1alkugk0NfSTnU_tgQ7fmGoLJINQLqENKr3yJBqzysyeQFZaekK1_kAnHioG8sL7UQFw4TvDCjA",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8011/account/users/status/check/git",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8011",
					"path": [
						"account",
						"users",
						"status",
						"check",
						"git"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "user_body",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "user_create_body",
			"value": ""
		},
		{
			"key": "user_login_token",
			"value": ""
		}
	]
}